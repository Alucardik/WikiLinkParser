// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WikiLinkParserClient is the client API for WikiLinkParser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WikiLinkParserClient interface {
	EstablishConnection(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ConnectionStatus, error)
	AbortConnection(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ConnectionStatus, error)
	PublishTask(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
}

type wikiLinkParserClient struct {
	cc grpc.ClientConnInterface
}

func NewWikiLinkParserClient(cc grpc.ClientConnInterface) WikiLinkParserClient {
	return &wikiLinkParserClient{cc}
}

func (c *wikiLinkParserClient) EstablishConnection(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ConnectionStatus, error) {
	out := new(ConnectionStatus)
	err := c.cc.Invoke(ctx, "/WikiLinkParser.WikiLinkParser/EstablishConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiLinkParserClient) AbortConnection(ctx context.Context, in *EmptyMsg, opts ...grpc.CallOption) (*ConnectionStatus, error) {
	out := new(ConnectionStatus)
	err := c.cc.Invoke(ctx, "/WikiLinkParser.WikiLinkParser/AbortConnection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wikiLinkParserClient) PublishTask(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, "/WikiLinkParser.WikiLinkParser/PublishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WikiLinkParserServer is the server API for WikiLinkParser service.
// All implementations must embed UnimplementedWikiLinkParserServer
// for forward compatibility
type WikiLinkParserServer interface {
	EstablishConnection(context.Context, *EmptyMsg) (*ConnectionStatus, error)
	AbortConnection(context.Context, *EmptyMsg) (*ConnectionStatus, error)
	PublishTask(context.Context, *ParseRequest) (*ParseResponse, error)
	mustEmbedUnimplementedWikiLinkParserServer()
}

// UnimplementedWikiLinkParserServer must be embedded to have forward compatible implementations.
type UnimplementedWikiLinkParserServer struct {
}

func (UnimplementedWikiLinkParserServer) EstablishConnection(context.Context, *EmptyMsg) (*ConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishConnection not implemented")
}
func (UnimplementedWikiLinkParserServer) AbortConnection(context.Context, *EmptyMsg) (*ConnectionStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortConnection not implemented")
}
func (UnimplementedWikiLinkParserServer) PublishTask(context.Context, *ParseRequest) (*ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishTask not implemented")
}
func (UnimplementedWikiLinkParserServer) mustEmbedUnimplementedWikiLinkParserServer() {}

// UnsafeWikiLinkParserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WikiLinkParserServer will
// result in compilation errors.
type UnsafeWikiLinkParserServer interface {
	mustEmbedUnimplementedWikiLinkParserServer()
}

func RegisterWikiLinkParserServer(s grpc.ServiceRegistrar, srv WikiLinkParserServer) {
	s.RegisterService(&WikiLinkParser_ServiceDesc, srv)
}

func _WikiLinkParser_EstablishConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiLinkParserServer).EstablishConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WikiLinkParser.WikiLinkParser/EstablishConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiLinkParserServer).EstablishConnection(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiLinkParser_AbortConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiLinkParserServer).AbortConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WikiLinkParser.WikiLinkParser/AbortConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiLinkParserServer).AbortConnection(ctx, req.(*EmptyMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WikiLinkParser_PublishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WikiLinkParserServer).PublishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WikiLinkParser.WikiLinkParser/PublishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WikiLinkParserServer).PublishTask(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WikiLinkParser_ServiceDesc is the grpc.ServiceDesc for WikiLinkParser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WikiLinkParser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WikiLinkParser.WikiLinkParser",
	HandlerType: (*WikiLinkParserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstablishConnection",
			Handler:    _WikiLinkParser_EstablishConnection_Handler,
		},
		{
			MethodName: "AbortConnection",
			Handler:    _WikiLinkParser_AbortConnection_Handler,
		},
		{
			MethodName: "PublishTask",
			Handler:    _WikiLinkParser_PublishTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "WikiLinkParserService.proto",
}
